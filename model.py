"""Models and database functions for final project."""from flask_sqlalchemy import SQLAlchemyimport requestsimport jsonfrom datetime import datetime, timedeltadb = SQLAlchemy()# API informationBASE_URL = "http://www.recreation.gov"AVAILABILITY_ENDPOINT = "/api/camps/availability/campground/"MAIN_PAGE_ENDPOINT = "/api/camps/campgrounds/"INPUT_DATE_FORMAT = "%Y-%m-%d"# FUNCTION IDEAS - do these live in model.py?# format_date# generate start date and end date# send request# get park information# get name of campsite# get num of available sites# validate dates entered are in the future# validate phone number entered# check avialability (main)class User(db.Model):	"""User of campsite notifier website"""	__tablename = "users"	user_id = db.Column(db.Integer,						primary_key=True,						autoincrement=True)	phone = db.Column(db.Varchar(10))	created_at = db.Column(db.DateTime)	email = db.Column(db.String(65))	password = db.Column(db.String(65))	def __repr__(self):		return f"<User user_id={self.user_id} phone={self.phone}>"class Campsite(db.Model):	"""Campsite on campsite notifier website"""	__tablename = "campsites"	id = db.Column(db.Integer,				   primary_key=True)	name = db.Column(db.String(200), nullable=False)	capacity = db.Column(db.Integer(1))	RV = db.Column(db.Boolean, default=False)	electricty = db.Column(db.Boolean, default=False)	dof_friendly = db.Column(db.Boolean, default=False)	def __repr__(self):        return f"<Campsite id={self.id} name={self.name}>"class Request(db.Model):	"""Request on campsite notifier website"""	__tablename = "requests"	id = db.Column(db.Integer,				   primary_key=True,				   autoincrement=True)	created_at = db.Column(db.DateTime)	user_id = db.Column(db.Integer)	campsite_id = db.Column(db.Integer)	date_start = db.Column(db.DateTime)	date_end = db.Column(db.DateTime)	num_nights = db.Column(db.Integer(1))	available = db.Column(db.Boolean)	def __repr__(self):        return f"""<Request id={self.id}                    user_id={self.user_id}                    campsite_id={self.campsite_id}                    available={self.available}>"""def send_request():	payload = {}	request = requests.get(url, params=payload)	return response.jsondef connect_to_db(app, db_name):	"""Connect to database"""	# Configure to use our PostgreSQL database	app.config["SQLALCHEMY_DATABASE_URI"] = f"postgresql:///camping"	app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False	db.app = app	db.init_app(app)if __name__ == "__main__":    # If I run this module interactively, I can work with the database     # directly    from server import app    connect_to_db(app)    print("Connected to DB.")